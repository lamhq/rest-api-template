services:
  database:
    image: postgres:13.3
    container_name: database
    restart: unless-stopped
    environment:
      POSTGRES_USER: testadmin
      POSTGRES_PASSWORD: test12345
      POSTGRES_DB: testdb
    ports:
      - '5432:5432'
    volumes:
      - test-db:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U testadmin -d testdb']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  migration-runner:
    build:
      context: .
      target: migration-runner
    container_name: migration-runner
    depends_on:
      database:
        condition: service_healthy
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: testadmin
      DB_PASSWORD: test12345
      DB_DATABASE: testdb
    networks:
      - test-network

  api-app:
    build:
      context: .
      target: api-app
    container_name: api-app
    depends_on:
      migration-runner:
        condition: service_completed_successfully
    environment:
      PORT: 3000
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: testadmin
      DB_PASSWORD: test12345
      DB_DATABASE: testdb
      NODE_ENV: production
      JWT_SECRET: abcd
    ports:
      - '3000:3000'
    networks:
      - test-network
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost:3000']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  test-db:

networks:
  test-network:
    driver: bridge
